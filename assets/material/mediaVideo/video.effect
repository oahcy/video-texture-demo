CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
        texture0:    { value: white}
        texture1:    { value: white}
        texture2:    { value: white}
        pixelFormat: { value: -1, target: param.x}
        chromaKey:   { value: 0, target: param.y}
        keyColor:  { value: [0.0, 1.0, 0.0, 1.0], editor: { type: color } }
        # threshold:   {value: 0.8, editor: { slide: true, range: [0.0, 16.0], step: 0.01 }}
        # slope:   {value: 0.2, editor: { slide: true, range: [0.0, 1.0], step: 0.01}}
        alphaThreshold:       { value: 0., editor: {slide: true, range: [0, 1.0], step: 0.001 } }
        chroma:   {value: 0.4, editor: { slide: true, range: [0.0, 1.0], step: 0.01}}
        chromaT:   {value: 0.05, editor: { slide: true, range: [0.0, 1.0], step: 0.01}}
        luma:   {value: 0.5, editor: { slide: true, range: [0.0, 1.0], step: 0.01}}
        lumaT:   {value: 0.05, editor: { slide: true, range: [0.0, 1.0], step: 0.01}}
  - name: transparent
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <legacy/input-standard>
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <legacy/local-batch>
    #include <legacy/fog-vs>
    #include <legacy/shadow-map-vs>
  #endif
  
  

  in vec4 a_color;
  #if HAS_SECOND_UV
    in vec2 a_texCoord1;
  #endif

  out vec3 v_position;
  out vec3 v_normal;
  out vec3 v_tangent;
  out vec3 v_bitangent;
  out vec2 v_uv;
  out vec2 v_uv1;
  out vec4 v_color;

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    #if USE_LOCAL
      mat4 matWorld, matWorldIT;
      CCGetWorldMatrixFull(matWorld, matWorldIT);

      vec4 pos = matWorld * In.position;

      v_position = pos.xyz;
      v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);
      v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);
      v_bitangent = cross(v_normal, v_tangent) * In.tangent.w; // note the cross order
    #endif

    v_uv = a_texCoord;
    #if HAS_SECOND_UV
      v_uv1 = a_texCoord1;
    #endif
    v_color = a_color;

    #if USE_LOCAL 
      CC_TRANSFER_FOG(pos);
      CC_TRANSFER_SHADOW(pos);

      return cc_matProj * (cc_matView * matWorld) * In.position;
    #else 
      return cc_matViewProj * In.position;
    #endif
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output>
  #if USE_LOCAL
    #include <legacy/fog-fs>
  #endif

  in vec2 v_uv;
  #if USE_LOCAL
    in vec3 v_position;
  #endif

  uniform sampler2D texture0;
  uniform sampler2D texture1;
  uniform sampler2D texture2;

  uniform Constant {
    vec4 mainColor;
    vec4 keyColor;
    vec4 param;
    // float threshold;
    // float slope;
    float alphaThreshold;
    float chroma;
    float chromaT;
    float luma;
    float lumaT;
  };

  vec3 rgbToYCbCr(vec3 rgb) {
		float y = 0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b;
		float cb = 0.564 * (rgb.b - y);
		float cr = 0.713 * (rgb.r - y);
		return vec3(cb, cr, y);
	}

  #pragma define-meta ALPHA_TEST_CHANNEL options([a, r])
  vec4 frag () {
    vec4 col = vec4(1, 1, 1, 1.0);
      //绿色
    mat4 YUV2RGB = mat4(
      vec4(1.16438,  0.00000,  1.59603, -0.87079),
      vec4(1.16438, -0.39176, -0.81297,  0.52959),
      vec4(1.16438,  2.01723,  0.00000, -1.08139),
      vec4(0, 0, 0, 1)
    );
    if (param.x == 0.0) {
      float y = texture(texture0, v_uv).r;
      float u = texture(texture1, v_uv).r;
      float v = texture(texture2, v_uv).r;
      col = vec4(y, u, v, 1.0) * YUV2RGB;
    } else if (param.x == 2.0) {
      col.rgb = texture(texture0, v_uv).rgb;
    } else if (param.x == 23.0) {
      float y = texture(texture0, v_uv).r;
      float u = texture(texture1, v_uv).r;
      float v = texture(texture1, v_uv).g;
      col = vec4(y, u, v, 1.0) * YUV2RGB;
    } else if (param.x == 24.0) {
      float y = texture(texture0, v_uv).r;
      float u = texture(texture1, v_uv).g;
      float v = texture(texture1, v_uv).r;
      col = vec4(y, u, v, 1.0) * YUV2RGB;
    } else if (param.x == 26.0) {
      col.rgba = texture(texture0, v_uv).rgba;
    }

    // #if REMOVE_GREEN_SCREEN
    //   // 扣绿幕
    //  float maskY = 0.2989 * greenColor.r + 0.5866 * greenColor.g + 0.1145 * greenColor.b;
    //  float maskCr = 0.7132 * (greenColor.r - maskY);
    //  float maskCb = 0.5647 * (greenColor.b - maskY);
     
    //  float Y = 0.2989 * col.r + 0.5866 * col.g + 0.1145 * col.b;
    //  float Cr = 0.7132 * (col.r - Y);
    //  float Cb = 0.5647 * (col.b - Y);
     
    //  //     float blendValue = 1.0 - smoothstep(thresholdSensitivity - smoothing, thresholdSensitivity , abs(Cr - maskCr) + abs(Cb - maskCb));
    //  float blendValue = smoothstep(0.4, 0.4 + 0.1, distance(vec2(Cr, Cb), vec2(maskCr, maskCb)));
    //  col.a *= blendValue;
    // #endif
    if (param.y > 0.0) {
      // float d = abs(length(abs(keyColor.rgb - col.rgb)));
      // float edge0 = threshold * (1.0 - slope);
      // float alpha = smoothstep(edge0, threshold, d);
      // col.a = alpha;
      // if (col.ALPHA_TEST_CHANNEL < alphaThreshold) discard;
      if (col.a > 0.) {
        vec3 srcYCbCr = rgbToYCbCr(col.rgb);
        vec3 keyYCbCr = rgbToYCbCr(keyColor.rgb);

        float dChroma = distance(srcYCbCr.xy, keyYCbCr.xy);
        float dLuma = distance(srcYCbCr.z, keyYCbCr.z);

        if (dLuma < luma && dChroma < chroma) {
          float a = 0.;
          if (dChroma > chroma - chromaT) {
            a = (dChroma -chroma + chromaT) / chromaT;
          }
          if (dLuma > luma - lumaT) {
            a = max(a, (dLuma - luma + lumaT) / lumaT);
          }
          if(col.a > a) {
            col.a = a;
          }
          if (col.ALPHA_TEST_CHANNEL < alphaThreshold) discard;
        }
      }
    }
    col = mainColor * col;
    
    #if USE_LOCAL
      CC_APPLY_FOG(col, v_position);
    #endif
    return CCFragOutput(col);
  }
}%
